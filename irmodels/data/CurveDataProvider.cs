using System;using CsvHelper;using System.Globalization;using Deedle;namespace irmodels.data{           public record struct CurveData(DateTime Date, string CurveLabel, string CurveType, double CurveValue);    public class CurveDataProvider : DataProvider<CurveData, string>    {        public CurveDataProvider(string folderpath, string[] riskfactors) : base(folderpath, riskfactors)        { }        public override CurveData[] this[string key]         {            get{ return (from x in Data where x.CurveLabel == key select x).ToArray(); }        }        public override void Close()        {            throw new NotImplementedException();        }        public override Series<DateTime, double> GetTargetSeries(string ticker)        {            var a = from p in Data where p.CurveLabel == ticker select p;            var b = Frame.FromRecords(a).IndexRows<DateTime>("date");            var targetts= b.GetColumn<double>("curve_value");            var dates = CleanRiskFrame.RowKeys;            return targetts[dates];        }        protected override Frame<DateTime, string> Toframe(CurverTpye curveType)        {            return Frame.FromRecords(Data.Where(p => p.CurveType==curveType.ToString().ToLower()))                    .PivotTable<int,string,DateTime,string,double>("date","curve_label",r=> r.GetColumn<double>("curve_value").FirstValue())                    .DropSparseRows();        }    }}